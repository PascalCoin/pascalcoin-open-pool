{
    /**
     * PascalCoin Testnet Configuration
     */

    /* Frontend URL of the pool */
    "poolUrl": "https://your.pool.host/",

    /* Hostname miners should connect to */
    "poolHost": "your.pool.host",

    /* Frontend name of the pool */
    "poolName": "PascalCoin Open Pool",

    /* Payload prefix, must be 15 characters or less without spaces */
    "poolId": "Openpool",

    /* Coin settings */
    "coin": "PascalCoin",
    "symbol": "PASC",
    "algorithm": "RandomHash",

    /**
     * Logging Settings
     *
     * level can be info, warn, or error
     * all levels that are equal or more severe than the
     * setting will be displayed.
     */
    "logging": {
	"files": {
	    "level": "info",
	    "directory": "logs",
	    "flushInterval": 5 // seconds
	},
	"console": {
	    "level": "info",
	    "colors": true
	}
    },

    /**
     * Pool Server Settings
     */
    "poolServer": {
        /* Enable this module */
	"enabled": true,

        /* How many seconds until miner is considered disconnected */
	"connectionTimeout": 600,

        /* If no new job rebroadcast current work so miners do not disconnect */
	"jobRebroadcastTimeout": 55, // seconds

        /* Enable for client IP addresses to be detected when using a load balancer with TCP
         * proxy protocol enabled, such as HAProxy with 'send-proxy' param:
         * http://haproxy.1wt.eu/download/1.5/doc/configuration.txt
         */
	"tcpProxyProtocol": false,

        /* If workers find two solutions to the same block before one of them is accepted
         * then you can control if they will be submitted.
         */
        "submitDuplicateBlockHeight": true,

        /* Allow miners to modify the timestamp of the block */
        "allowTimestampVariance": true,

        /* Amount of time that old passwords are cached */
        "passwordExpireTime": 3600,

        /* Start multiple threads for the pool server module
         * Set to "auto" by default which will spawn one process/fork/worker for each CPU
         * core in your system. Each of these workers will run a separate instance of your
         * pool, and the kernel will load balance miners using these forks. Optionally,
         * the 'forks' field can be a number for how many forks will be spawned.
         */
	"clustering": {
            "enabled": false,
            "forks": "auto"
	},

        /**
         * Port Configuration
         *
         * You can have as many ports for your miners to connect to as you wish. Each port can be
         * configured to use its own difficulty and variable difficulty settings. varDiff is
         * optional and will only be used for the ports you configure it for.
         *
         * You can also give each port a description and make it hidden from the frontend.
         */
	"ports": [
	    {
                /* The port for your miners to connect to */
		"port": "4443",

                /* The starting or fixed difficulty for this port */
		"diff": 0.00000010,

                /* Short description for the frontend */
		"desc": "Variable difficulty (150 H/s)",

                /* Hide this port from the frontend */
                "hidden": false,

                /* Variable difficulty is a feature that will automatically adjust difficulty for
                 * individual miners based on their hashrate in order to lower networking overhead
                 */
		"varDiff": {
                    /* Minimum difficulty */
		    "minDiff": 0.00000010,

                    /* Maximum difficulty */
		    "maxDiff": 0.00001000,

                    /* Try to get 1 share per this many seconds */
		    "targetTime": 30,

                    /* Check to see if we should retarget every this many seconds */
		    "retargetTime": 90,

                    /* Allow share time to vary this much from target without retargeting */
		    "variancePercent": 30
		}
	    },
	    {
		"port": "4444",
		"diff": 0.00000050,
		"desc": "Variable difficulty (700 H/s)",
                "hidden": false,
		"varDiff": {
		    "minDiff": 0.00000010,
		    "maxDiff": 0.00001000,
		    "targetTime": 30,
		    "retargetTime": 90,
		    "variancePercent": 30
		}
	    },
	    {
		"port": "4445",
		"diff": 0.00000100,
		"desc": "Variable difficulty (1500 H/s or greater)",
                "hidden": false,
		"varDiff": {
		    "minDiff": 0.00000100,
		    "maxDiff": 0.00001000,
		    "targetTime": 30,
		    "retargetTime": 90,
		    "variancePercent": 30
		}
	    },
	    {
		"port": "4446",
		"diff": 0.00000010,
		"desc": "Fixed difficulty (150 H/s)",
                "hidden": true
	    },
	    {
		"port": "4447",
		"diff": 0.00000050,
		"desc": "Fixed difficulty (500 H/s)",
                "hidden": true
	    },
	    {
		"port": "4448",
		"diff": 0.00000100,
		"desc": "Fixed difficulty (1500 H/s or greater)",
                "hidden": true
	    }
	],

        /* If a worker is submitting a high threshold of invalid shares we can temporarily ban their IP
         * to reduce system/network load. Also useful to fight against flooding attacks. If running
         * behind something like HAProxy be sure to enable 'tcpProxyProtocol', otherwise you'll end up
         * banning your own IP address (and therefore all workers).
        */
	"banning": {
            /* Enable banning */
	    "enabled": true,

            /* How many seconds to ban worker for*/
	    "time": 600,

            /* What percent of invalid shares triggers ban */
	    "invalidPercent": 50,

            /* Check invalid percent when this many shares have been submitted */
	    "checkThreshold": 50
	}
    },

    /**
     *  Payment Configuration
     */
    "payments": {
        /* Enable payments module */
        "enabled": true,

        /* How often to run in seconds */
        "interval": 600,

        /* Default payment threshold */
        "defaultPayment": 10,

        /* Minimum payment threshold */
        "minPayment": 0.5,

        /* Maximum payment threshold */
        "maxPayment": 100,

        /* Amount of PASC mined per PASA payout */
        "pasaThreshold": 0.2,

        /* Default b58 key to donate unclaimed PASA */
        "pasaDonations": "3GhhbosZdhiz5rdosLYaCRSG93nc2WLrob5bSX93WUie7VqX5XeArnZrPYZ9npXMvVceJf5fJqwFE4gX4ECwGEAGy86rhmRwjLS5ZF"
    },

    /**
     *  Block Unlocker Configuration
     */
    "blockUnlocker": {
        /* Enable this module */
        "enabled": true,

        /* How often to check block statuses in seconds */
        "interval": 30,

        /* How many confirmations until balances are confirmed
         * PascalCoin network requires 100 confirms, but you can decrease
         * this if you have extra PASC / PASA in your pool wallet */
        "depth": 100
    },

    /**
     *  Fee Configuration
     */
    "fees": {
        /* Pool fee as a percentage, i.e. 1 is 1% */
        "poolFee": 0,

        /* Network fee in PASC, do not change this */
        "devFee": 0.2000
    },

    /**
     * Exchange Configuration
     *
     * Array of known account numbers, their common name, and if they require payment ID
     */
    "knownAccounts": [
        {
            "account": "86646-64",
            "name": "Poloniex",
            "requirePaymentID": true
        }
    ],

    /**
     * Daemon Configuration
     */
    "daemon": {
        /* IP of pascalcoin_daemon */
        "host": "127.0.0.1",

        /* RPC port of pascalcoin_daemon */
        "port": 4103,

        /* Mining port of pascalcoin_daemon */
        "miningPort": 4109,

        /* Password of the pool wallet open in the daemon
         * Make sure to set this with curl before operation!
         * The pool will automatically unlock and relock the
         * wallet during payments.
         */
        "password": "your_wallet_password",

        /* Daemon monitoring for admin page */
        "monitoring": {
            "enabled": true,
            "interval": 60
        }
    },

    /**
     * Redis Configuration
     */
    "redis": {
        /* IP of redis server */
	"host": "127.0.0.1",

        /* Port of redis server */
	"port": 6379,

        /* Database index */
	"database": 0,

        /* Redis prefix */
	"prefix": "pasc_testnet",

        /* Redis auth */
	"auth": "",

        /* Days to keep redis data */
	"cleanupInterval": 7
    },

    /**
     * API Configuration
     */
    "api": {
        /* Enable this module */
        "enabled": true,

        /* How many second worth of shares used to estimate hash rate */
        "hashrateWindow": 600,

        /* Gather stats and broadcast every this many seconds */
        "updateInterval": 5,

        /* Bind API to a specific IP (set to 0.0.0.0 for all) */
        "bindIp": "0.0.0.0",

        /* Port to serve API on */
        "port": 8118,

        /* Number of blocks to send at a time */
        "blocks": 30,

        /* Number of payments to send at a time */
        "payments": 30,

        /* Password required for admin stats */
        "password": "your_admin_password",

        /* Proxy X-Forwarded-For support */
        "trustProxyIP": true
    },

    /**
     * Charts Configuration
     */
    "charts": {
        /* General Pool Charts */
        "pool": {
            "hashrate": {
                /* Enable this chart */
                "enabled": true,
                /* How often to get current value */
                "updateInterval": 60,
                /* Chart step interval calculated as average of all updated values */
                "stepInterval": 60,
                /* Max time to store charts, 604800 = 1 week */
                "maximumPeriod": 604800
            },
            "miners": {
                "enabled": true,
                "updateInterval": 60,
                "stepInterval": 60,
                "maximumPeriod": 604800
            },
            "workers": {
                "enabled": true,
                "updateInterval": 60,
                "stepInterval": 60,
                "maximumPeriod": 604800
            },
            "nethash": {
                "enabled": true,
                "updateInterval": 60,
                "stepInterval": 60,
                "maximumPeriod": 604800
            },
            "priceUSD": {
                "enabled": true,
                "updateInterval": 300,
                "stepInterval": 300,
                "maximumPeriod": 604800
            },
            "priceBTC": {
                "enabled": true,
                "updateInterval": 300,
                "stepInterval": 300,
                "maximumPeriod": 604800
            },
            "blocks": {
                "enabled": true,
                "days": 7
            }
        },

        /* User specific Pool Charts */
        "user": {
            "hashrate": {
                "enabled": true,
                "updateInterval": 60,
                "stepInterval": 60,
                "maximumPeriod": 604800
            },
            "worker_hashrate": {
                "enabled": true,
                "updateInterval": 60,
                "stepInterval": 60,
                "maximumPeriod": 604800
            },
            "payments": {
                "enabled": true
            }
        }
    },

    /**
     * Email Configuration
     */
    "email": {
        /* Enable email notifications */
        "enabled": true,

        /* Send HTML emails */
        "useHTML": false,

        /* Default user notifications */
        "defaultNotifications": "worker_start,worker_stop,payment_pasc,payment_pasa",

        /* Address emails will be sent from */
        "fromAddress": "email@example.com",

        /* The transport mode (sendmail, smtp or mailgun) */
        "transport": "mailgun",

        /* Configuration for sendmail transport
         * Documentation: http://nodemailer.com/transports/sendmail/
         */
        "sendmail": {
            "path": "/usr/sbin/sendmail"
        },

        /* Configuration for SMTP transport
         * Documentation: http://nodemailer.com/smtp/
         */
        "smtp": {
            "host": "smtp.example.com",
            "port": 587,
            "secure": false,
            "auth": {
                "user": "username",
                "pass": "password"
            },
            "tls": {
                "rejectUnauthorized": false
            }
        },

        /* Configuration for MailGun transport
         * Documentation: https://documentation.mailgun.com
         */
        "mailgun": {
            "key": "",
            "domain": ""
        }
    }
}
